
<div class="calendar-grid-container" style="margin-top: 30px;">

    @if (this.LstGiorni.Any())
    {

        // Scorro le settimane.
        @foreach(var week in Enumerable.Range(1, GetWeekNumberOfMonth(new DateTime(Anno, Mese, LstGiorni.Max(x => x.Giorno)))))
        {

            // Scorro i giorni della settimana.
            @foreach(var giorno in Enumerable.Range(1, 7))
            {
                var giornofdp = this.LstGiorni.FirstOrDefault(x => giorno == GetDayOfWeek(new DateTime(Anno, Mese, x.Giorno)) && week == GetWeekNumberOfMonth(new DateTime(Anno, Mese, x.Giorno)));

                if (giornofdp is not null)
                {
                    // Stampo il giorno.
                    <div class="calendar-grid-day">  
                        
                        <!-- Day name -->
                        <h6 class="d-block text-right">
                            @GetDayName(new DateTime(Anno, Mese, giornofdp.Giorno)) <b>@giornofdp.Giorno</b>  
                        </h6>

                        <!-- Vpa -->
                        <FdpCalendarVpa LstDettagli="giornofdp.Dettagli"></FdpCalendarVpa>

                    </div>
                }
                else
                {
                    // Stampo il giorno disabilitato.
                    <div></div>
                }
            }

        }
    }

</div>


@code {

    [Parameter]
    public int Anno { get; set; }

    [Parameter]
    public int Mese { get; set; }

    [Parameter]
    public List<FoglioPresenzaGiornoDto> LstGiorni { get; set; }

    private CultureInfo cul = CultureInfo.CurrentCulture;

    protected string GetDayName(DateTime date)
    {
        return cul.DateTimeFormat.GetDayName(date.DayOfWeek).Substring(0, 3);
    }

    protected int GetWeekNumberOfMonth(DateTime date)
    {
        return cul.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday);
    }

    protected int GetDayOfWeek(DateTime date)
    {
        var dow = date.DayOfWeek;

        switch (dow)
        {
            case DayOfWeek.Monday:
                return 1;
            case DayOfWeek.Tuesday:
                return 2;
            case DayOfWeek.Wednesday:
                return 3;
            case DayOfWeek.Thursday:
                return 4;
            case DayOfWeek.Friday:
                return 5;
            case DayOfWeek.Saturday:
                return 6;
            case DayOfWeek.Sunday:
                return 7;
        }

        return 0;
    }
}
