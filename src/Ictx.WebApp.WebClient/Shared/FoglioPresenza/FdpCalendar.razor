
<div class="calendar-grid-container" style="margin-top: 30px;">

    @if (numberOfWeeks > 0)
    {
        @for (var week = 1; week <= numberOfWeeks; week++)
        {
            @for (var giorno = 1; giorno <= 7; giorno++)
            {
                var giornofdp = this.LstGiorni.FirstOrDefault(x => giorno == GetDayOfWeek(new DateTime(Anno, Mese, x.Giorno)) && week == GetWeekNumberOfMonth(new DateTime(Anno, Mese, x.Giorno)));

                if (giornofdp is not null)
                {
                    <div class="calendar-grid-day">

                        <!-- Day name -->
                        <div class="d-flex">
                            <div class="pull-left">
                                @GetDayName(new DateTime(Anno, Mese, giornofdp.Giorno))
                            </div>
                            <div class="pull-right">
                                @giornofdp.Giorno
                            </div>
                        </div>

                        <!-- Vpa -->
                        @foreach (var dettaglio in giornofdp.Dettagli)
                        {
                            <div>
                                <div>
                                    @dettaglio.Vpa.Sigla
                                </div>
                                <div>
                                    @($"{dettaglio.Ore}:{dettaglio.Minuti}")
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="calendar-grid-day disabled"></div>
                }
            }

        }
    }

</div>


@code {

    [Parameter]
    public int Anno { get; set; }

    [Parameter]
    public int Mese { get; set; }

    [Parameter]
    public List<FoglioPresenzaGiornoDto> LstGiorni { get; set; }


    private int numberOfWeeks = 0;
    private CultureInfo cul = CultureInfo.CurrentCulture;


    protected string GetDayName(DateTime date)
    {
        return cul.DateTimeFormat.GetDayName(date.DayOfWeek).Substring(0, 3);
    }

    protected override void OnParametersSet()
    {
        this.numberOfWeeks = GetWeekNumberOfMonth(new DateTime(Anno, Mese, LstGiorni.Max(x => x.Giorno)));

        StateHasChanged();
        //base.OnParametersSet();
    }

    protected int GetWeekNumberOfMonth(DateTime date)
    {
        return cul.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday);
    }


    protected int GetDayOfWeek(DateTime date)
    {
        var dow = date.DayOfWeek;

        switch (dow)
        {
            case DayOfWeek.Monday:
                return 1;
            case DayOfWeek.Tuesday:
                return 2;
            case DayOfWeek.Wednesday:
                return 3;
            case DayOfWeek.Thursday:
                return 4;
            case DayOfWeek.Friday:
                return 5;
            case DayOfWeek.Saturday:
                return 6;
            case DayOfWeek.Sunday:
                return 7;
        }

        return 0;
    }
}
